The reason why I like to make things like games rather than more complicated things like programming languages is partly because I want for other people to be able to experience my creations, and that’s just so much easier to do with games than it is with more technical creations. That is part of the reason why I am struggling with motivation to build this project—how will anyone else see it? Interact with it? How will I ship it for Hack Club, if I end up submitting it to Shipwrecked? I plan to make everything open-source on Github (including this training data set), but I am also considering making it so that people can upload their own journal entries or training data set and train the model themselves. I could also possibly add cool visualizations as it trains so that they can see it. 

If you are interested in trying tea, I would personally recommend getting a sampler or variety pack! These packs come with a cornucopia of flavor varieties for you to try, and you’re sure to find at least one you enjoy! Some of these packs have a common theme, like herbal teas, while others contain all different types—if you’re completely new to tea-drinking, I would recommend getting a variety pack which contains all different types of tea, like black, green, and even white teas! In my opinion, the best temperature for tea is 170-175 degrees Farenheight. I have noticed that this is the temperature at which it cools down quickly enough for you to drink it almost immediately, even while it's steeping! Also, under-steeped tea is a much easier fix than over-steeped tea, so I would err on the side of too short steeping it than too long, since you can always put the teabag back in if need be. However, I may not be the best person to be offering advice on this subject, since I primarily (almost exclusively, actually) drink herbal teas, so I don't have any good guidance on other kinds like green, black, white, red, etc.

I also feel like providing some unsollicited advice on programming, so that is what I will be doing :) I don't have a whole lot of programming experience despite trying to learn how to program many times over, through courses, tutorials, passion projects, etc. Projects can often offer too little structure to really learn a new topic, but courses can get bogged down in details which don't actually help you in the long run and don't spend enough time on practical advice. In truth, there is a delicate balance to be struck and I have no idea how to go about doing it correctly lol. I think what it requires is taking your learning into your own hands and balancing projects with course work on your own so that you don't get stuck in a rut (course education helps with this) and you don't end up just learning a lot of theoretical knowledge with no idea of how to apply it (the projects are the heavy-hitters here). 